===============================================================================
                        LIVE2D EXTENSION CHANGELOG
===============================================================================

ИНСТРУКЦИЯ ДЛЯ CLAUDE:
======================
Этот файл содержит полную документацию всех изменений в расширении Live2D.
Перед работой с кодом ОБЯЗАТЕЛЬНО прочитайте этот файл для понимания:
- Существующих систем и их архитектуры
- Принятых решений и подходов  
- Настроек и конфигураций
- Совместимости между компонентами

ПРИ ДОБАВЛЕНИИ НОВЫХ ИЗМЕНЕНИЙ:
- Добавляйте новую секцию с датой и описанием
- Указывайте затронутые файлы и функции
- Документируйте API и настройки
- Обновляйте секцию совместимости

===============================================================================
ШАБЛОН ДЛЯ НОВЫХ ИЗМЕНЕНИЙ
===============================================================================

ИЗМЕНЕНИЕ #N: [НАЗВАНИЕ] (Дата)
===============================
СУТЬ: [краткое описание]

ФАЙЛЫ:
• [файл] - [что изменено]

АЛГОРИТМ: [ключевые шаги]

НАСТРОЙКИ:
• [название]: [тип, умолчание, описание]

===============================================================================
ИЗМЕНЕНИЕ #1: СИСТЕМА ДВИЖЕНИЯ ТЕЛА 
===============================================================================

СУТЬ: Заменили прямую привязку параметров к движению рта на систему состояний 
(idle/talking) с многослойным шумом, импульсами и физической инерцией.

ФАЙЛЫ:
======
• bodyMovement.js - новый файл с системой движений
• live2d.js - интеграция, отключение старой привязки, функция notifyMouthActivity
• window.html - UI секция "Body Movement System"
• ui.js - 5 обработчиков событий для настроек
• index.js - настройки по умолчанию и инициализация событий

АЛГОРИТМ:
=========
1. Отслеживание: playTalk() → notifyMouthActivity(true/false)
2. Состояния: idle (500мс+ без движения рта) / talking
3. Шумы: 3 слоя (медленный/средний/быстрый) + импульсы + корреляция
4. Физика: пружина-демпфер для инерции
5. Применение: преобразование в диапазон параметра модели

НАСТРОЙКИ:
==========
• bodyMovementEnabled: bool, по умолчанию true
• bodyMovementIdleIntensity: 0.0-1.0, по умолчанию 0.3  
• bodyMovementTalkingIntensity: 0.0-1.0, по умолчанию 0.6
• bodyMovementImpulseChance: 0-10%, по умолчанию 2%
• bodyMovementSmoothness: 0.5-0.99, по умолчанию 0.85
• bodyMovementImpulseInertia: 0.80-0.98, по умолчанию 0.92

КЛЮЧЕВЫЕ ФУНКЦИИ:
=================
• startBodyMovement() - запуск системы для персонажа
• stopBodyMovement() - остановка системы
• restartBodyMovement() - перезапуск
• notifyMouthActivity() - уведомление о движении рта

===============================================================================
ИЗМЕНЕНИЕ #2: СИСТЕМА MOUTH-LINKED PARAMETERS
===============================================================================

СУТЬ: Добавили систему для привязки до 3 дополнительных параметров к движению рта
с индивидуальными диапазонами для каждого параметра.

ФАЙЛЫ:
======
• window.html - UI блоки для 3 mouth-linked параметров
• ui.js - обработчики onMouthLinkedParam1/2/3Change + сохранение в настройки персонажа
• live2d.js - updateMouthLinkedSettings функция (legacy для совместимости)
• index.js - импорт новых функций и инициализация событий

АЛГОРИТМ:
=========
1. UI: 3 блока (Parameter ID + Min/Max диапазон)
2. Сохранение: настройки привязаны к конкретному персонажу/модели
3. Структура: extension_settings.live2d.characterModelsSettings[character][model_path]['mouth_linked_params']
4. Использование: система bodyMovement.js читает эти настройки

НАСТРОЙКИ ПО ПЕРСОНАЖУ:
=======================
• mouth_linked_params.param1: {paramId: '', minValue: 0, maxValue: 30}
• mouth_linked_params.param2: {paramId: '', minValue: 0, maxValue: -15}  
• mouth_linked_params.param3: {paramId: '', minValue: 0, maxValue: 10}

ИНТЕГРАЦИЯ:
===========
• Настройки сохраняются для каждого персонажа/модели отдельно
• UI автоматически загружает сохранённые значения при выборе модели
• Система bodyMovement.js использует эти параметры для естественных движений

===============================================================================
ИЗМЕНЕНИЕ #3: ПАРАМЕТРЫ ДЛЯ ОТЛАДКИ
===============================================================================

СУТЬ: Добавили инструменты для тестирования и отладки параметров Live2D моделей.

ФАЙЛЫ:
======
• window.html - секция "Body Parameters Testing"
• ui.js - onLogParametersClick, onCustomParamChange, onResetCustomParamClick
• live2d.js - logModelParameters, setBodyParameter функции
• index.js - инициализация отладочных событий

ФУНКЦИОНАЛЬНОСТЬ:
=================
• Log All Parameters - выводит все доступные параметры модели в консоль
• Custom Parameter ID/Value - ручное тестирование любого параметра (-30 до 30)
• Reset Custom Parameter - сброс параметра к 0
• Безопасная обработка ошибок без спама в консоль

ИНСТРУМЕНТЫ:
============
• Фильтрация body/angle/torso/waist параметров
• Проверка существования параметра перед применением
• Универсальный слайдер для любых параметров модели

ФУНКЦИИ API:
============
• logModelParameters(character) - логирует все параметры в консоль
• setBodyParameter(character, paramId, value) - устанавливает значение параметра

===============================================================================
ИЗМЕНЕНИЕ #4: СИСТЕМА АВТОМАТИЧЕСКИХ АНИМАЦИЙ (Сентябрь 2025)
===============================================================================

СУТЬ: Добавили комплексную систему автоматических анимаций для создания 
"живых" персонажей: движения глаз, микросаккады с настраиваемыми 
параметрами и без необходимости перезагрузки страницы.

ФАЙЛЫ:
======
• live2d.js - функции autoEyeMovement, autoMicrosaccades
• ui.js - обработчики событий для всех настроек анимаций  
• window.html - UI секция "Auto Animations" с детальными настройками
• index.js - настройки по умолчанию и инициализация событий

АЛГОРИТМЫ:
==========
1. ДВИЖЕНИЯ ГЛАЗ: система саккад-фиксаций с центральными/периферийными зонами
2. МИКРОСАККАДЫ: мелкие случайные движения поверх основных движений глаз
3. УПРАВЛЕНИЕ: startAutoAnimations/stopAutoAnimations/restartAutoAnimations

НАСТРОЙКИ:
==========
• autoAnimationsEnabled: bool, включение/выключение всех анимаций, по умолчанию true
• autoEyeCenterWeight: 0-100%, вероятность взгляда по сторонам (0%=всегда центр, 100%=всегда стороны), по умолчанию 70%
• autoEyeAmplitudeCenter: 0.001-2.0, амплитуда движений в центральной зоне, по умолчанию 0.05
• autoEyeAmplitudePeripheral: 0.0-1.0, амплитуда периферийных движений, по умолчанию 0.2
• autoEyeFixationMin/Max: 100-1000/500-3000мс, время фиксации взгляда, по умолчанию 200/2000мс
• microsaccadesEnabled: bool, включение микросаккад, по умолчанию true
• microsaccadeAmplitude: 0.001-0.1, сила микросаккад, по умолчанию 0.02
• microsaccadeFrequency: 0.1-3.0, частота микросаккад, по умолчанию 1.0
• microsaccadeDuration: 5-50мс, длительность микросаккад, по умолчанию 15мс
• microsaccadeIntervalMin/Max: 100-1000/500-3000мс, интервалы между микросаккадами, по умолчанию 300/1500мс

КЛЮЧЕВЫЕ ИСПРАВЛЕНИЯ:
=====================
• Использование правильного API: setParameterValueById для абсолютных позиций
• Строгие зоны центр/периферия: 0% и 100% работают как ожидается
• Настройка микросаккад: добавлены подробные настройки для контроля интенсивности
• Кнопка "Restart Animations": обновление настроек без перезагрузки страницы
• Конвертация старых настроек: автоматический перевод 0-100 в 0-1 формат для внутреннего использования

АРХИТЕКТУРА:
============
• autoAnimationsRunning[character] - трекинг активных анимаций по персонажам
• Отдельные async функции для каждого типа анимации (eyeMovement, microsaccades)
• Экспорт функций управления для использования в ui.js
• Правильное использование setParameterValueById для всех типов анимаций

===============================================================================
ИЗМЕНЕНИЕ #5: ИСПРАВЛЕНИЕ СОХРАНЕНИЯ MOUTH-LINKED PARAMETERS
===============================================================================

СУТЬ: Полностью переработали систему сохранения Mouth-Linked параметров - 
теперь настройки корректно сохраняются и восстанавливаются для каждого персонажа/модели.

АРХИТЕКТУРНЫЕ ИЗМЕНЕНИЯ:
========================
• Настройки интегрированы в структуру characterModelsSettings для каждого персонажа/модели
• Добавлены дефолтные настройки в defaultSettings (index.js)
• Удалена зависимость от глобальных переменных

СИСТЕМА СОХРАНЕНИЯ:
===================
• onMouthLinkedParam1/2/3Change() теперь сохраняют через saveSettingsDebounced()
• Автоматическая инициализация mouth_linked_params при создании настроек модели
• Загрузка сохранённых настроек в UI при выборе персонажа/модели в loadModelUi()

RUNTIME ОБНОВЛЕНИЯ:
===================
• Система bodyMovement.js теперь читает параметры из characterModelsSettings напрямую
• updateMouthLinkedSettings() оставлена для обратной совместимости

СТРУКТУРА ДАННЫХ:
=================
extension_settings.live2d.characterModelsSettings[character][model_path] = {
    ...
    'mouth_linked_params': {
        'param1': { 'paramId': '', 'minValue': 0, 'maxValue': 30 },
        'param2': { 'paramId': '', 'minValue': 0, 'maxValue': -15 },
        'param3': { 'paramId': '', 'minValue': 0, 'maxValue': 10 }
    }
    ...
}

РЕЗУЛЬТАТ:
==========
✓ Настройки Mouth-Linked параметров корректно сохраняются между сессиями
✓ Каждый персонаж/модель имеет независимые настройки
✓ UI автоматически загружает правильные значения при смене персонажа/модели
✓ Полная интеграция с существующей системой настроек extension_settings

===============================================================================
ИЗМЕНЕНИЕ #6: TTS AUDIO BINDING СИСТЕМА (@4eckme) - ИСПРАВЛЕНО
===============================================================================

СУТЬ: Добавлена интеграция с внешней TTS системой для синхронизации движений рта 
с аудио воспроизведением вместо симуляции по тексту.

ФАЙЛЫ:
======
• live2d.js - модификация функции playTalk() с добавлением TTS bind

АЛГОРИТМ:
=========
1. Установка window.live2d_tts_bind = false в начале разговора
2. Ожидание внешнего сигнала от TTS системы (таймаут 5 секунд)
3. Если TTS ответил (window.live2d_tts_bind === true):
   - Используется TTS режим: анимация продолжается пока window.live2d_tts_bind === true
   - Когда TTS устанавливает флаг в false - анимация завершается
4. Если TTS не ответил за 5 секунд:
   - Используется обычный режим: анимация по таймеру (text.length * mouth_time_per_character)
5. После завершения ВСЕГДА вызывается notifyMouthActivity(character, false)

ИНТЕГРАЦИЯ ДЛЯ ВНЕШНИХ TTS:
============================
```javascript
// Для запуска анимации рта:
window.live2d_tts_bind = true;

// Для остановки анимации рта (персонаж вернется в idle):
window.live2d_tts_bind = false;
```

ИСПРАВЛЕНИЯ (Сентябрь 2025):
=============================
✓ КРИТИЧЕСКОЕ: Исправлен бесконечный цикл `while (... || true)` 
✓ КРИТИЧЕСКОЕ: Теперь notifyMouthActivity(character, false) вызывается при завершении
✓ Персонаж корректно возвращается из режима talking в idle
✓ Добавлен таймаут 5 секунд для TTS ответа (учитывает задержку после генерации текста)
✓ Система автоматически определяет режим (TTS или таймер)
✓ Fallback на обычный режим если TTS не отвечает

НАЗНАЧЕНИЕ:
===========
• Позволяет внешним системам TTS контролировать движения рта
• Заменяет симуляцию движений на реальную синхронизацию с аудио
• Используется сторонними разработчиками для улучшения реализма
• Совместима с Body Movement System (корректные переходы idle/talking)

===============================================================================
АРХИТЕКТУРА РАСШИРЕНИЯ
===============================================================================

ОСНОВНЫЕ КОМПОНЕНТЫ:
====================
• index.js - точка входа, инициализация, настройки по умолчанию
• live2d.js - управление моделями, анимации, автоматические системы
• ui.js - интерфейс пользователя и обработчики событий  
• window.html - HTML разметка интерфейса
• bodyMovement.js - продвинутая система движений тела
• constants.js - константы, настройки API, библиотеки
• utils.js - вспомогательные функции
• gallery/ - система выбора моделей
  ├── gallery.js - функции галереи
  └── galleryDlg.html - диалог выбора

СТРУКТУРА ДАННЫХ:
=================
• extension_settings.live2d.* - все настройки расширения
• models[character] - загруженные модели по персонажам
• is_talking[character] - состояние разговора персонажей
• autoAnimationsRunning[character] - состояние автоматических анимаций
• bodyMovementStates[character] - состояния системы движения тела

КЛЮЧЕВЫЕ ПЕРЕМЕННЫЕ И API:
==========================
• charactersWithModelLoaded() - список персонажей с загруженными моделями
• loadLive2d() - основная функция загрузки/перезагрузки моделей
• playTalk(character, text) - воспроизведение анимации разговора
• startAutoAnimations(character) - запуск автоматических анимаций
• startBodyMovement(character, model, model_path) - запуск системы движений тела

ПРАВИЛА ИНТЕГРАЦИИ:
===================
• Настройки → defaultSettings (index.js) для значений по умолчанию
• UI → window.html с префиксом live2d_ для всех элементов
• События → экспорт из ui.js, импорт в index.js
• Персонализация → characterModelsSettings[character][model_path] для настроек модели

СИСТЕМЫ КООРДИНАЦИИ:
====================
• Система bodyMovement координируется с playTalk через notifyMouthActivity
• Автоматические анимации управляются независимо через autoAnimationsRunning
• TTS binding интегрируется с playTalk для внешнего контроля
• Галерея интегрируется с основной системой выбора моделей

===============================================================================
ТЕКУЩЕЕ СОСТОЯНИЕ (Сентябрь 2025)
===============================================================================

РЕАЛИЗОВАННЫЕ СИСТЕМЫ:
======================
✓ Базовая система Live2D с полной поддержкой моделей
✓ Автоматические анимации (глаза, микросаккады) - полностью работоспособно
✓ Продвинутая система движения тела с физикой, многослойным шумом и "живой" случайностью
✓ Настраиваемые mouth-linked параметры (до 3 штук на персонажа) - корректное сохранение
✓ Инструменты отладки и тестирования параметров модели
✓ TTS audio binding система для внешней интеграции
✓ Галерея выбора моделей с предварительным просмотром
✓ Совместимость с групповыми и одиночными чатами
✓ Персонализированные настройки для каждого персонажа/модели
✓ Система координации между всеми компонентами
✓ Корректное сохранение/восстановление всех настроек между сессиями

АРХИТЕКТУРНЫЕ ПРИНЦИПЫ:
=======================
• Модульность: каждая система изолирована в отдельном файле
• Персонализация: все настройки привязаны к персонажу/модели
• Совместимость: legacy функции сохранены для обратной совместимости
• Производительность: эффективное управление памятью и ресурсами
• Расширяемость: простое добавление новых анимаций и параметров

КАЧЕСТВО КОДА:
==============
• Все системы протестированы и стабильно работают
• Исправлены все проблемы с накоплением параметров
• Корректное использование Live2D API
• Отсутствие memory leaks при перезагрузке моделей
• Надежная обработка ошибок во всех системах